--- agl-jbig2enc-e8be922/jbig2enc.cc~	2012-07-10 18:54:58.803003802 +0200
+++ agl-jbig2enc-e8be922/jbig2enc.cc	2012-07-10 18:56:34.312464272 +0200
@@ -35,20 +35,30 @@
 #define u64 uint64_t
 #define u32 uint32_t
 #define u16 uint16_t
 #define u8  uint8_t
 
 #include "jbig2arith.h"
 #include "jbig2sym.h"
 #include "jbig2structs.h"
 #include "jbig2segments.h"
 
+#ifdef __MINGW32__
+unsigned short my_htons(unsigned short x) {
+  return x >> 8 & 0xff | x << 8 & 0xff00;
+}
+unsigned long my_htonl(unsigned long x) {
+  return x >> 24 & 0xff | x >> 8 & 0xff00 | x << 8 & 0xff0000 |
+         x << 24 & 0xff000000ul;
+}
+#endif
+
 // -----------------------------------------------------------------------------
 // Removes spots which are less than size x size pixels
 //
 // Note, this has a side-effect of removing a few pixels
 // that from components you want to keep.
 //
 // If that's a problem, you do a binary reconstruction
 // (from seedfill.c):
 // -----------------------------------------------------------------------------
 static PIX *
--- agl-jbig2enc-e8be922/jbig2.cc~	2012-07-10 18:54:56.703015664 +0200
+++ agl-jbig2enc-e8be922/jbig2.cc	2012-07-10 18:56:33.432469243 +0200
@@ -61,21 +61,21 @@
 pixInfo(PIX *pix, const char *msg) {
   if (msg != NULL) fprintf(stderr, "%s ", msg);
   if (pix == NULL) {
     fprintf(stderr, "NULL pointer!\n");
     return;
   }
   fprintf(stderr, "%u x %u (%d bits) %udpi x %udpi, refcount = %u\n",
           pix->w, pix->h, pix->d, pix->xres, pix->yres, pix->refcount);
 }
 
-#ifdef _MSC_VER
+#ifdef WIN32
 // -----------------------------------------------------------------------------
 // Windows, sadly, lacks asprintf
 // -----------------------------------------------------------------------------
 #include <stdarg.h>
 int
 asprintf(char **strp, const char *fmt, ...) {
     va_list va;
     va_start(va, fmt);
 
     const int required = vsnprintf(NULL, 0, fmt, va);
@@ -329,35 +329,47 @@
     fprintf(stderr, "Refinement makes not sense unless in symbol mode!\n");
     fprintf(stderr, "(if you have -r, you must have -s)\n");
     return 5;
   }
 
   if (up2 && up4) {
     fprintf(stderr, "Can't have both -2 and -4!\n");
     return 6;
   }
 
+#ifdef WIN32
+  int result = setmode(1, WINBINARY);  // stdout.
+  if (result == -1) {
+    perror("Cannot set mode to binary for stdout.");
+    return 1;
+  }
+#endif
+
   struct jbig2ctx *ctx = jbig2_init(threshold, 0.5, 0, 0, !pdfmode, refine ? 10 : -1);
   int pageno = -1;
 
   int numsubimages=0, subimage=0, num_pages = 0;
   while (i < argc) {
     if (subimage==numsubimages) {
       subimage = numsubimages = 0;
       FILE *fp;
-      if ((fp=fopen(argv[i], "r"))==NULL) {
+      if ((fp=fopen(argv[i], "rb"))==NULL) {
         fprintf(stderr, "Unable to open \"%s\"", argv[i]);
         return 1;
       }
       l_int32 filetype;
-      findFileFormatStream(fp, &filetype);
+      if (findFileFormatStream(fp, &filetype)) {
+        fprintf(stderr, "Unable to get file format of \"%s\"", argv[i]);
+        return 1;
+      }
       if (filetype==IFF_TIFF && tiffGetCount(fp, &numsubimages)) {
+        fprintf(stderr, "Cannot process TIFF with subimages: \"%s\"", argv[i]);
         return 1;
       }
       fclose(fp);
     }
 
     PIX *source;
     if (numsubimages<=1) {
       source = pixRead(argv[i]);
     } else {
       source = pixReadTiff(argv[i], subimage++);
--- agl-jbig2enc-e8be922/jbig2segments.h~	2012-07-10 18:55:05.292967141 +0200
+++ agl-jbig2enc-e8be922/jbig2segments.h	2012-07-10 18:56:35.142459583 +0200
@@ -1,22 +1,29 @@
 // Copyright 2006 Google Inc. All Rights Reserved.
 // Author: agl@google.com (Adam Langley)
 
 #ifndef THIRD_PARTY_JBIG2ENC_JBIG2SEGMENTS_H__
 #define THIRD_PARTY_JBIG2ENC_JBIG2SEGMENTS_H__
 
 #include <vector>
-#ifdef _MSC_VER
-#include <winsock2.h>
-#else
+#ifdef __MINGW32__ 
+#define htons my_htons 
+#define htonl my_htons 
+unsigned short my_htons(unsigned short); 
+unsigned long my_htonl(unsigned long);   
+#else 
+#ifdef _MSC_VER 
+#include <winsock.h> 
+#else 
 #include <netinet/in.h>
 #endif
+#endif
 
 // -----------------------------------------------------------------------------
 // See comments in jbig2structs.h about the bit packing in this structure.
 // -----------------------------------------------------------------------------
 #if defined(WIN32)
 #pragma pack(1)
 #endif
 struct jbig2_segment {
   u32 number;
 #ifndef _BIG_ENDIAN
